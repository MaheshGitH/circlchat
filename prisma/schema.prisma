datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  user_id       String?      @unique @map("userId")
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  groups        GroupList[]
  invitaion     Invitation[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refreshToken") @db.String
  access_token      String? @map("accessToken") @db.String
  expires_at        Int?    @map("expiresAt")
  token_type        String? @map("tokenType")
  scope             String?
  id_token          String? @map("idToken") @db.String
  session_state     String? @map("sessionState")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Group {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  groupName String
  image     String?
  createdAt DateTime @default(now())

  @@map("groups")
}

type GroupList {
  groupId   String
  groupName String
  image     String?
}

type Invitation {
  PWI       String
  groupName String
  groupId   String
  image     String?
}
